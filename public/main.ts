import { app, BrowserWindow, ipcMain } from "electron";
import storage from "electron-json-storage";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    minWidth: 800,
    minHeight: 600,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      contextIsolation: true,
    },
  });

  // set menu visibility
  mainWindow.setMenuBarVisibility(false);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
// IPC listeners
ipcMain.on("get-data-path", async (event) => {
  event.returnValue = storage.getDataPath();
});

ipcMain.on("set", async (event, key, json) => {
  storage.set(key, json, (error) => {
    if (error) throw error;
  });
});

ipcMain.on("get", async (event, key) => {
  storage.get(key, (error, data) => {
    if (error) throw error;
    event.returnValue = data;
  });
});

ipcMain.on("get-all", async (event) => {
  storage.getAll((error, data) => {
    if (error) throw error;
    // filter the json data to exclude the folders
    const filteredData = Object.keys(data).reduce((acc, key) => {
      if (key !== "folders") {
        acc[key as keyof typeof data] = data[key as keyof typeof data];
      }
      return acc;
    }, {});
    event.returnValue = filteredData;
  });
});

ipcMain.on("remove", async (event, key) => {
  storage.remove(key, (error) => {
    if (error) throw error;
  });
});
